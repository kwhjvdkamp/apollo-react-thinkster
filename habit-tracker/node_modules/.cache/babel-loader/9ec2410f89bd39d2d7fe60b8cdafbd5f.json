{"ast":null,"code":"var _jsxFileName = \"C:\\\\HomeProjects\\\\apollo-react-thinkster\\\\habit-tracker\\\\src\\\\App.js\";\nimport React from \"react\";\nimport logo from \"./logo.svg\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport \"./App.css\"; // import Loading from \"./Loading\";\n// import Error from \"./Error\";\n\nimport Habit from \"./Habit\";\nimport AddHabit from \"./AddHabit\";\n/**\n * Imports\n * 1) 'useQuery' is a React hook\n * 2) 'gql' a function to pass in GraphQL syntax via a tagged template literal\n * https://thinkster.io/tutorials/up-and-running-with-gatsby-styling/using-styled-components */\n\nexport const HABITS_QUERY = gql`\n  query HABITS_QUERY {\n    habits {\n      id\n      description\n      points\n      entries {\n        id\n        notes\n        date\n        completed\n      }\n    }\n    totalPoints {\n      points\n      totalCompletedEntries\n    }\n  }\n`;\n\nfunction App() {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(HABITS_QUERY);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const {\n    habits,\n    totalPoints\n  } = data;\n  const entryString = totalPoints.totalCompletedEntries.length > 1 ? \"entries\" : \"entry\";\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"bottom-margin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Habits\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"muscle emoji\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDCAA\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Total Points: \", totalPoints.points, \" (\", totalPoints.totalCompletedEntries, \" \", entryString, \")\"), /*#__PURE__*/React.createElement(AddHabit, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"habit-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, data.habits.map(habit => {\n    return /*#__PURE__*/React.createElement(Habit, {\n      key: habit.id,\n      habit: habit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 18\n      }\n    });\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/HomeProjects/apollo-react-thinkster/habit-tracker/src/App.js"],"names":["React","useQuery","gql","Habit","AddHabit","HABITS_QUERY","App","data","loading","error","habits","totalPoints","entryString","totalCompletedEntries","length","points","map","habit","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,OAAO,WAAP,C,CACA;AACA;;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA;;;;;;AAKA,OAAO,MAAMC,YAAY,GAAGH,GAAI;;;;;;;;;;;;;;;;;;CAAzB;;AAoBP,SAASI,GAAT,GAAe;AACb,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BR,QAAQ,CAACI,YAAD,CAAzC;;AAEA,MAAIG,OAAJ,EAAa;AACX,wBAAO;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAIC,KAAJ,EAAW;AACT,wBAAO;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA0BJ,IAAhC;AACA,QAAMK,WAAW,GACfD,WAAW,CAACE,qBAAZ,CAAkCC,MAAlC,GAA2C,CAA3C,GAA+C,SAA/C,GAA2D,OAD7D;AAGA,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACS,GADT,eAEE;AAAM,IAAA,IAAI,EAAC,KAAX;AAAiB,kBAAW,cAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CADF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACiBH,WAAW,CAACI,MAD7B,QAEGJ,WAAW,CAACE,qBAFf,OAEuCD,WAFvC,MAPF,eAWE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,eAkCA;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,IAAI,CAACG,MAAL,CAAYM,GAAZ,CAAiBC,KAAD,IAAW;AAC1B,wBAAO,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,KAAK,CAACC,EAAlB;AAAsB,MAAA,KAAK,EAAED,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFA,CADH,CAlCA,CADF,CADF;AA4CD;;AAED,eAAeX,GAAf","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport \"./App.css\";\n// import Loading from \"./Loading\";\n// import Error from \"./Error\";\nimport Habit from \"./Habit\";\nimport AddHabit from \"./AddHabit\";\n/**\n * Imports\n * 1) 'useQuery' is a React hook\n * 2) 'gql' a function to pass in GraphQL syntax via a tagged template literal\n * https://thinkster.io/tutorials/up-and-running-with-gatsby-styling/using-styled-components */\nexport const HABITS_QUERY = gql`\n  query HABITS_QUERY {\n    habits {\n      id\n      description\n      points\n      entries {\n        id\n        notes\n        date\n        completed\n      }\n    }\n    totalPoints {\n      points\n      totalCompletedEntries\n    }\n  }\n`;\n\nfunction App() {\n  const { data, loading, error } = useQuery(HABITS_QUERY);\n\n  if (loading) {\n    return <div className=\"container\">{/* <Loading /> */}</div>;\n  }\n\n  if (error) {\n    return <div className=\"container\">{/* <Error error={error} /> */}</div>;\n  }\n\n  const { habits, totalPoints } = data;\n  const entryString =\n    totalPoints.totalCompletedEntries.length > 1 ? \"entries\" : \"entry\";\n\n  return (\n    <>\n      <div>\n        <h2 className=\"bottom-margin\">\n          Habits{\" \"}\n          <span role=\"img\" aria-label=\"muscle emoji\">\n            ðŸ’ª\n          </span>\n        </h2>\n        <p>\n          Total Points: {totalPoints.points} (\n          {totalPoints.totalCompletedEntries} {entryString})\n        </p>\n        <AddHabit />\n\n      {/* <ul>\n          {data.habits.map((habit) => {\n            return (\n              <li key={habit.id}>\n              {`${habit.description} (${habit.points} points)`}\n              <ul>\n                {habit.entries &&\n                  habit.entries.map((entry) => {\n                    const date = new Date(entry.date).toLocaleDateString();\n                    const completed = entry.completed ? \"âœ…\" : \"ðŸ‘«\";\n                    return (\n                      <li\n                        key={entry.id}\n                      >{`${date}: ${entry.notes} (${completed})`}</li>\n                    );\n                  })}\n              </ul>\n            </li>\n            );\n          })}\n        </ul> */}\n      <ul className=\"habit-list\">\n        {data.habits.map((habit) => {\n          return <Habit key={habit.id} habit={habit} />;\n        })}\n      </ul>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}