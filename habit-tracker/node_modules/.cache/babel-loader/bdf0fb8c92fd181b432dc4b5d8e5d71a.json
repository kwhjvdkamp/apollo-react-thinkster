{"ast":null,"code":"var _jsxFileName = \"C:\\\\HomeProjects\\\\apollo-react-thinkster\\\\habit-tracker\\\\src\\\\AddEntry.js\";\nimport React, { useRef, useState } from \"react\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport DatePicker from \"react-date-picker\";\nimport { ENTRIES_QUERY } from \"./Habit\";\nimport Error from \"./Error\";\nimport { useEscFn } from \"./helpers/useEscFn\";\nimport { ENTRY_FIELDS } from \"./helpers/fragments\";\nconst CREATE_ENTRY_MUTATION = gql`\n  mutation CREATE_ENTRY_MUTATION($input: NewEntryInput) {\n    createEntry(input: $input) {\n      ...EntryFields\n    }\n  }\n  ${ENTRY_FIELDS}\n`;\n\nfunction AddEntry({\n  show,\n  habitId,\n  onAddEntrySuccess\n}) {\n  const [notes, setNotes] = useState(null);\n  const [date, setDate] = useState();\n  const [completed, setCompleted] = useState(false);\n  const notesInput = useRef(null);\n  const [createEntry, {\n    error,\n    loading\n  }] = useMutation(CREATE_ENTRY_MUTATION, {\n    refetchQueries: [{\n      query: ENTRIES_QUERY,\n      variables: {\n        id: habitId\n      }\n    }],\n    onCompleted: () => onAddEntrySuccess()\n  });\n\n  const resetAndEmit = () => {\n    setDate(null);\n    setCompleted(false);\n    onAddEntrySuccess();\n  };\n\n  useEscFn(resetAndEmit);\n\n  const handleNotesChange = () => {\n    const {\n      value\n    } = notesInput.current;\n    setNotes(value);\n  };\n\n  const handleDateChange = dateFromPicker => {\n    setDate(dateFromPicker);\n  };\n\n  const toggleCompleted = () => {\n    setCompleted(!completed);\n  };\n\n  const addEntry = e => {\n    e.preventDefault();\n    const input = {\n      habitId,\n      date,\n      notes,\n      completed\n    };\n    createEntry({\n      variables: {\n        input\n      }\n    });\n    notesInput.current.value = \"\";\n    setDate(null);\n    setCompleted(false);\n    setNotes(\"\");\n  };\n\n  if (!show) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: addEntry,\n    style: {\n      marginLeft: \"-5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DatePicker, {\n    type: \"date\",\n    name: \"date\",\n    value: date,\n    onChange: handleDateChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Entry notes\",\n    name: \"notes\",\n    ref: notesInput,\n    style: {\n      marginLeft: \"5px\",\n      width: \"100px\"\n    },\n    onChange: handleNotesChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"emoji-button\",\n    onClick: toggleCompleted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, completed ? \"âœ…\" : \"ğŸ˜‘\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"red-button\",\n    onClick: resetAndEmit,\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"blue-button\",\n    disabled: !notes || !date || loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, \"Add\", loading ? \"ing...\" : \"\"), error && /*#__PURE__*/React.createElement(Error, {\n    error: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }));\n}\n\nexport default AddEntry;","map":{"version":3,"sources":["C:/HomeProjects/apollo-react-thinkster/habit-tracker/src/AddEntry.js"],"names":["React","useRef","useState","useMutation","gql","DatePicker","ENTRIES_QUERY","Error","useEscFn","ENTRY_FIELDS","CREATE_ENTRY_MUTATION","AddEntry","show","habitId","onAddEntrySuccess","notes","setNotes","date","setDate","completed","setCompleted","notesInput","createEntry","error","loading","refetchQueries","query","variables","id","onCompleted","resetAndEmit","handleNotesChange","value","current","handleDateChange","dateFromPicker","toggleCompleted","addEntry","e","preventDefault","input","marginLeft","width"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport { useMutation, gql } from \"@apollo/client\";\r\nimport DatePicker from \"react-date-picker\";\r\nimport { ENTRIES_QUERY } from \"./Habit\";\r\nimport Error from \"./Error\";\r\nimport { useEscFn } from \"./helpers/useEscFn\";\r\nimport { ENTRY_FIELDS } from \"./helpers/fragments\";\r\n\r\nconst CREATE_ENTRY_MUTATION = gql`\r\n  mutation CREATE_ENTRY_MUTATION($input: NewEntryInput) {\r\n    createEntry(input: $input) {\r\n      ...EntryFields\r\n    }\r\n  }\r\n  ${ENTRY_FIELDS}\r\n`;\r\n\r\nfunction AddEntry({ show, habitId, onAddEntrySuccess }) {\r\n  const [notes, setNotes] = useState(null);\r\n  const [date, setDate] = useState();\r\n  const [completed, setCompleted] = useState(false);\r\n  const notesInput = useRef(null);\r\n  const [createEntry, { error, loading }] = useMutation(CREATE_ENTRY_MUTATION, {\r\n    refetchQueries: [{ query: ENTRIES_QUERY, variables: { id: habitId } }],\r\n    onCompleted: () => onAddEntrySuccess(),\r\n  });\r\n\r\n  const resetAndEmit = () => {\r\n    setDate(null);\r\n    setCompleted(false);\r\n    onAddEntrySuccess();\r\n  };\r\n\r\n  useEscFn(resetAndEmit);\r\n\r\n  const handleNotesChange = () => {\r\n    const { value } = notesInput.current;\r\n    setNotes(value);\r\n  };\r\n\r\n  const handleDateChange = (dateFromPicker) => {\r\n    setDate(dateFromPicker);\r\n  };\r\n\r\n  const toggleCompleted = () => {\r\n    setCompleted(!completed);\r\n  };\r\n\r\n  const addEntry = (e) => {\r\n    e.preventDefault();\r\n    const input = { habitId, date, notes, completed };\r\n    createEntry({ variables: { input } });\r\n    notesInput.current.value = \"\";\r\n    setDate(null);\r\n    setCompleted(false);\r\n    setNotes(\"\");\r\n  };\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={addEntry} style={{ marginLeft: \"-5px\" }}>\r\n      <DatePicker\r\n        type=\"date\"\r\n        name=\"date\"\r\n        value={date}\r\n        onChange={handleDateChange}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Entry notes\"\r\n        name=\"notes\"\r\n        ref={notesInput}\r\n        style={{ marginLeft: \"5px\", width: \"100px\" }}\r\n        onChange={handleNotesChange}\r\n      />\r\n      <button type=\"button\" className=\"emoji-button\" onClick={toggleCompleted}>\r\n        {completed ? \"âœ…\" : \"ğŸ˜‘\"}\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        className=\"red-button\"\r\n        onClick={resetAndEmit}\r\n        disabled={loading}\r\n      >\r\n        Cancel\r\n      </button>\r\n      <button\r\n        type=\"submit\"\r\n        className=\"blue-button\"\r\n        disabled={!notes || !date || loading}\r\n      >\r\n        Add{loading ? \"ing...\" : \"\"}\r\n      </button>\r\n      {error && <Error error={error} />}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddEntry;\r\n"]},"metadata":{},"sourceType":"module"}